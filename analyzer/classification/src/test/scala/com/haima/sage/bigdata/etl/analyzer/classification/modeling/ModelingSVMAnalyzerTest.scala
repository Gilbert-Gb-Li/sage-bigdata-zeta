package com.haima.sage.bigdata.analyzer.classification.modeling

import com.haima.sage.bigdata.etl.common.Constants
import com.haima.sage.bigdata.etl.common.Implicits._
import com.haima.sage.bigdata.etl.common.model.filter.ReAnalyzer
import com.haima.sage.bigdata.etl.common.model.{AnalyzerModel, AnalyzerType, RichMap, SVMAnalyzer}
import com.haima.sage.bigdata.etl.modeling.flink.analyzer.ModelingAnalyzerProcessor
import org.apache.flink.api.scala._
import org.junit.Test

class ModelingSVMAnalyzerTest {
  private val env = ExecutionEnvironment.getExecutionEnvironment
  Constants.init("sage-analyzer-svm.conf")
  //训练数据
  //二分类训练和预测用例
  protected val trainData: DataSet[RichMap] = env.fromElements(
    //    Map("label"->"正常","features"-> "5.1,3.5,1.4,0.2"),
    //    Map("label"->"正常","features"-> "4.9,3.0,1.4,0.2"),
    //    Map("label"->"正常","features"-> "4.7,3.2,1.3,0.2"),
    //    Map("label"->"正常","features"-> "4.6,3.1,1.5,0.2"),
    //    Map("label"->"正常","features"-> "5.0,3.6,1.4,0.2"),
    //    Map("label"->"正常","features"-> "5.4,3.9,1.7,0.4"),
    //    Map("label"->"正常","features"-> "4.6,3.4,1.4,0.3"),
    //    Map("label"->"正常","features"-> "5.0,3.4,1.5,0.2"),
    //    Map("label"->"正常","features"-> "4.4,2.9,1.4,0.2"),
    //    Map("label"->"正常","features"-> "4.9,3.1,1.5,0.1"),
    //    Map("label"->"正常","features"-> "5.4,3.7,1.5,0.2"),
    //    Map("label"->"正常","features"-> "4.8,3.4,1.6,0.2"),
    //    Map("label"->"正常","features"-> "4.8,3.0,1.4,0.1"),
    //    Map("label"->"正常","features"-> "4.8,3.0,1.4,0.1"),
    //    Map("label"->"正常","features"-> "5.8,4.0,1.2,0.2"),
    //    Map("label"->"正常","features"-> "5.7,4.4,1.5,0.4"),
    //    Map("label"->"正常","features"-> "5.4,3.9,1.3,0.4"),
    //    Map("label"->"正常","features"-> "5.1,3.5,1.4,0.3"),
    //    Map("label"->"正常","features"-> "5.7,3.8,1.7,0.3"),
    //    Map("label"->"正常","features"-> "5.1,3.8,1.5,0.3"),
    //    Map("label"->"正常","features"-> "5.4,3.4,1.7,0.2"),
    //    Map("label"->"正常","features"-> "5.1,3.7,1.5,0.4"),
    //    Map("label"->"正常","features"-> "4.6,3.6,1.0,0.2"),
    //    Map("label"->"正常","features"-> "5.1,3.3,1.7,0.5"),
    //    Map("label"->"正常","features"-> "4.8,3.4,1.9,0.2"),
    //    Map("label"->"正常","features"-> "5.0,3.0,1.6,0.2"),
    //    Map("label"->"正常","features"-> "5.0,3.4,1.6,0.4"),
    //    Map("label"->"正常","features"-> "5.2,3.5,1.5,0.2"),
    //    Map("label"->"正常","features"-> "5.2,3.4,1.4,0.2"),
    //    Map("label"->"正常","features"-> "4.7,3.2,1.6,0.2"),
    //    Map("label"->"正常","features"-> "4.8,3.1,1.6,0.2"),
    //    Map("label"->"正常","features"-> "5.4,3.4,1.5,0.4"),
    //    Map("label"->"正常","features"-> "5.2,4.1,1.5,0.1"),
    //    Map("label"->"正常","features"-> "5.5,4.2,1.4,0.2"),
    //    Map("label"->"正常","features"-> "4.9,3.1,1.5,0.1"),
    //    Map("label"->"正常","features"-> "5.0,3.2,1.2,0.2"),
    //    Map("label"->"正常","features"-> "5.5,3.5,1.3,0.2"),
    //    Map("label"->"正常","features"-> "4.9,3.1,1.5,0.1"),
    //    Map("label"->"正常","features"-> "4.4,3.0,1.3,0.2"),
    //    Map("label"->"正常","features"-> "5.1,3.4,1.5,0.2"),
    //    Map("label"->"正常","features"-> "5.0,3.5,1.3,0.3"),
    //    Map("label"->"正常","features"-> "4.5,2.3,1.3,0.3"),
    //    Map("label"->"正常","features"-> "4.4,3.2,1.3,0.2"),
    //    Map("label"->"正常","features"-> "5.0,3.5,1.6,0.6"),
    //    Map("label"->"正常","features"-> "5.1,3.8,1.9,0.4"),
    //    Map("label"->"正常","features"-> "4.8,3.0,1.4,0.3"),
    //    Map("label"->"正常","features"-> "5.1,3.8,1.6,0.2"),
    //    Map("label"->"正常","features"-> "4.6,3.2,1.4,0.2"),
    //    Map("label"->"正常","features"-> "5.3,3.7,1.5,0.2"),
    //    Map("label"->"正常","features"-> "5.0,3.3,1.4,0.2"),
    //    Map("label"->"异常","features"-> "7.0,3.2,4.7,1.4"),
    //    Map("label"->"异常","features"-> "6.4,3.2,4.5,1.5"),
    //    Map("label"->"异常","features"-> "6.9,3.1,4.9,1.5"),
    //    Map("label"->"异常","features"-> "5.5,2.3,4.0,1.3"),
    //    Map("label"->"异常","features"-> "6.5,2.8,4.6,1.5"),
    //    Map("label"->"异常","features"-> "5.7,2.8,4.5,1.3"),
    //    Map("label"->"异常","features"-> "6.3,3.3,4.7,1.6"),
    //    Map("label"->"异常","features"-> "4.9,2.4,3.3,1.0"),
    //    Map("label"->"异常","features"-> "6.6,2.9,4.6,1.3"),
    //    Map("label"->"异常","features"-> "5.2,2.7,3.9,1.4"),
    //    Map("label"->"异常","features"-> "5.0,2.0,3.5,1.0"),
    //    Map("label"->"异常","features"-> "5.9,3.0,4.2,1.5"),
    //    Map("label"->"异常","features"-> "6.0,2.2,4.0,1.0"),
    //    Map("label"->"异常","features"-> "6.1,2.9,4.7,1.4"),
    //    Map("label"->"异常","features"-> "5.6,2.9,3.6,1.3"),
    //    Map("label"->"异常","features"-> "6.7,3.1,4.4,1.4"),
    //    Map("label"->"异常","features"-> "5.6,3.0,4.5,1.5"),
    //    Map("label"->"异常","features"-> "5.8,2.7,4.1,1.0"),
    //    Map("label"->"异常","features"-> "6.2,2.2,4.5,1.5"),
    //    Map("label"->"异常","features"-> "5.6,2.5,3.9,1.1"),
    //    Map("label"->"异常","features"-> "5.9,3.2,4.8,1.8"),
    //    Map("label"->"异常","features"-> "6.1,2.8,4.0,1.3"),
    //    Map("label"->"异常","features"-> "6.3,2.5,4.9,1.5"),
    //    Map("label"->"异常","features"-> "6.1,2.8,4.7,1.2"),
    //    Map("label"->"异常","features"-> "6.4,2.9,4.3,1.3"),
    //    Map("label"->"异常","features"-> "6.6,3.0,4.4,1.4"),
    //    Map("label"->"异常","features"-> "6.8,2.8,4.8,1.4"),
    //    Map("label"->"异常","features"-> "6.7,3.0,5.0,1.7"),
    //    Map("label"->"异常","features"-> "6.0,2.9,4.5,1.5"),
    //    Map("label"->"异常","features"-> "5.7,2.6,3.5,1.0"),
    //    Map("label"->"异常","features"-> "5.5,2.4,3.8,1.1"),
    //    Map("label"->"异常","features"-> "5.5,2.4,3.7,1.0"),
    //    Map("label"->"异常","features"-> "5.8,2.7,3.9,1.2"),
    //    Map("label"->"异常","features"-> "6.0,2.7,5.1,1.6"),
    //    Map("label"->"异常","features"-> "5.4,3.0,4.5,1.5"),
    //    Map("label"->"异常","features"-> "6.0,3.4,4.5,1.6"),
    //    Map("label"->"异常","features"-> "6.7,3.1,4.7,1.5"),
    //    Map("label"->"异常","features"-> "6.3,2.3,4.4,1.3"),
    //    Map("label"->"异常","features"-> "5.6,3.0,4.1,1.3"),
    //    Map("label"->"异常","features"-> "5.5,2.5,4.0,1.3"),
    //    Map("label"->"异常","features"-> "5.5,2.6,4.4,1.2"),
    //    Map("label"->"异常","features"-> "6.1,3.0,4.6,1.4"),
    //    Map("label"->"异常","features"-> "5.8,2.6,4.0,1.2"),
    //    Map("label"->"异常","features"-> "5.0,2.3,3.3,1.0"),
    //    Map("label"->"异常","features"-> "5.6,2.7,4.2,1.3"),
    //    Map("label"->"异常","features"-> "5.7,3.0,4.2,1.2"),
    //    Map("label"->"异常","features"-> "5.7,2.9,4.2,1.3"),
    //    Map("label"->"异常","features"-> "6.2,2.9,4.3,1.3"),
    //    Map("label"->"异常","features"-> "5.1,2.5,3.0,1.1"),
    //    Map("label"->"异常","features"-> "5.7,2.8,4.1,1.3")
    //  )
    Map("features" -> Array(0.9988732405174987, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9987919942916673, 0.9999843227991471, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9987804233839391, 0.9995744520872002, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9991579108451372, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9991992208344512, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9991314878889358, 0.9999206704337604, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9988909074419934, 0.9976934167150409, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0), "label" -> 1),
    Map("features" -> Array(0.9989748482735932, 0.9999921653547099, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9988811614816755, 0.9998931308097386, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9988752312544874, 0.9998876421168801, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1)
  )
  protected val unpredictData: DataSet[RichMap] = env.fromElements(
    Map("features" -> Array(0.9988732405174987, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9987919942916673, 0.9999843227991471, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)),
    Map("features" -> Array(0.9987804233839391, 0.9995744520872002, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)),
    Map("features" -> Array(0.9991579108451372, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9991992208344512, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9991314878889358, 0.9999206704337604, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9988909074419934, 0.9976934167150409, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)),
    Map("features" -> Array(0.9989748482735932, 0.9999921653547099, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)),
    Map("features" -> Array(0.9988811614816755, 0.9998931308097386, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9988752312544874, 0.9998876421168801, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))
  )

  //二分类训练模型
  @Test
  def train(): Unit = { //训练模型
    val conf = SVMAnalyzer(0.002, 0.1, 100, 100, "label","classifyLabel", "features")
    // val processor = ModelingAnalyzerProcessor(conf)
    val processor = new ModelingSVMAnalyzer(conf, AnalyzerType.MODEL)
    assert(processor.engine() == AnalyzerModel.MODELING)
    val result = processor.action(trainData).collect()
    result.foreach(v => {
      println(v)
    })
    //println(result)
  }

  //二分类预测
  @Test
  def predict(): Unit = { //分类预测
    val conf = ReAnalyzer(Some(SVMAnalyzer(0.002, 0.1, 100, 100, "label","classifyLabel", "features")))
    val processor = ModelingAnalyzerProcessor(conf)
    //assert(processor.engine() == AnalyzerModel.MODELING)
    val result = processor.process(unpredictData).head
    println(result.print())
  }

  lazy val ds_iris: DataSet[RichMap] = env.fromElements(
    Map("features" -> Array(0.9988732405174987, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9987919942916673, 0.9999843227991471, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9987804233839391, 0.9995744520872002, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9991579108451372, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9991992208344512, 0.9999843224130757, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 2),
    Map("features" -> Array(0.9991314878889358, 0.9999206704337604, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509822, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509823, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509824, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9988909074419934, 0.9976934167150409, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0), "label" -> 1),
    Map("features" -> Array(0.9989748482735932, 0.9999921653547099, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9988811614816755, 0.9998931308097386, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9988752312544874, 0.9998876421168801, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509825, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9990596465149666, 0.9998517765399618, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9991350280154576, 0.9999262061238535, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), "label" -> 1),
    Map("features" -> Array(0.9991350280154576, 0.9995287789370075, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509826, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992032297372158, 0.9998931308097386, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992002268373689, 0.9998876421168801, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9992562856509827, 0.9965773460288905, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 1),
    Map("features" -> Array(0.9990637951272885, 0.9997997421354611, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), "label" -> 3),
    Map("features" -> Array(0.9992996484977487, 0.9996595616515062, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), "label" -> 3),
    Map("features" -> Array(0.9992934300655211, 0.9997090403436742, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0), "label" -> 3)
  )

  //多分类训练模型
  @Test
  def trainMultiple(): Unit = {
    //iris数据集合

    //wine数据集合
    val conf = SVMAnalyzer(0.002, 0.1, 100, 100, "label","classifyLabel", "features", multi = true)
    val processor = new ModelingSVMAnalyzer(conf, AnalyzerType.MODEL)
    //
    //   val lables= labelTuple(ds_iris, conf.label).collect()
    //
    //    lables.map(tuple=>{
    //      val lbs= ds_iris.getExecutionEnvironment.fromElements(tuple)
    //      filter(ds_iris,lbs)
    //
    //    }).reduce(_.union(_)).collect().foreach(println)
    //
    //    def filter(dataSet: DataSet[RichMap],lbs:DataSet[(String,String)]) ={
    //    ds_iris.filter(new RichFilterFunction[RichMap] {
    //
    //      lazy val tuple = getRuntimeContext.getBroadcastVariable[(String,String)]("labels").get(0)
    //
    //      override def filter(value: RichMap): Boolean = {
    //        println("tuple:"+tuple)
    //
    //        if (tuple._1 == tuple._2) {
    //          true
    //        } else {
    //
    //          val lb = value.getOrElse(conf.label, "").toString
    //          lb == tuple._1 || lb == tuple._2
    //        }
    //      }
    //
    //    }).withBroadcastSet(lbs, "labels")
    //    }


    val data: DataSet[RichMap] = env.fromElements(Map("positive" -> 3, "negative" -> 3, "weight" ->
      Array(-0.010647600772134025, -0.01030527517503048, 0.1273485955736078, -0.010709139833974623, -0.22533725311631345, 0.06321781261082252, 0.18573396019883462, 0.04331660290959661, -0.16695484392931187, -0.10786691650502328, 0.01785685966736744, -0.0789766429123542, 0.1421863072501526, 0.0, 0.06322169997391958, -0.18179608605066927, -0.010707469571726396, -0.015060588504413294, -0.010709139833974623, 0.13946275789206924, -0.3127738190797226, -0.0107073339486886, -0.07392479729606627, -0.010707469571726396, -0.01070881526429711, -0.010708618662817809, -0.01070881526429711, 0.1421923250682131, 0.013835567283278581, -0.010707469571726396, -0.2597473932593905, -0.010709139833974623, -0.47002505451783894, 0.15625158629036004, -0.010707461699464396, 0.1273485955736078, -0.15016956279733898, -0.010709139833974623, -0.010709139833974623, -0.01070900421093684, -0.010709139833974623, -0.010703122015914012, -7.872261996808863E-9, 0.0, -0.010709139833974623, -0.010709139833974623, -0.010709139833974623, -0.010709139833974623, 0.17108861647894286, 0.14219150795721341, 0.0, -0.10249615782127434, 0.2775248329832021, -0.010709139833974623, 0.16400648364545037, -0.16796037527209084, -0.010709139833974623, -0.010702465221719408, -0.010709139833974623, -0.010708458346012658, -0.010709139833974623, -0.010709139833974623, 0.005376119707614998, -0.010706804905269797, -0.121687466418403, -0.010708807609457539).mkString(","),
      "threshold" -> 0.0),
      Map("positive" -> 1, "negative" -> 1, "weight" -> Array(-0.02966784873193401, -0.030170571118489583, -0.2175541697710576, -0.029687066516372842, 0.372864398931401, -0.17336712327093365, -0.175138178584966, -0.23622274508606267, 0.2800782222784482, 0.30886531841771403, -0.26261456443938536, -0.1458963337340293, -0.4261724763420631, 0.0, 0.15304423792138372, 0.16228036221450207, 0.006459281718171993, 0.04162037515468148, -0.029687066516372842, -0.10942806041654463, 0.24621986566512527, 0.0064587945768754965, 0.22210563380320195, 0.006459281718171993, -0.029687764803200463, -0.0719724973467584, -0.029687764803200463, -0.0636159523433251, -0.05058426585702695, 0.006459281718171993, 0.290636361391728, -0.029687066516372842, 0.4866655373010591, 0.052791722345213545, 0.10552227762155408, -0.2175541697710576, 0.17266442006641677, -0.029687066516372842, -0.029687066516372842, -0.029687553657669345, -0.029687066516372842, 0.3328694574823652, -0.09906299590338208, 0.0, -0.029687066516372842, -0.029687066516372842, -0.029687066516372842, -0.029687066516372842, -0.15582108049633006, -0.0636099614725668, 0.0, 0.05019068975579451, -0.06994798381041843, -0.029687066516372842, -0.08803864349868916, 0.2107586051195607, -0.029687066516372842, 0.2905835395106832, -0.029687066516372842, -0.029692570245834653, -0.029687066516372842, -0.029687066516372842, 0.1461678133085009, 0.06323635964987213, 0.09663017554120247, -0.0719722862012272).mkString(","),
        "threshold" -> 0.0),
      Map("positive" -> 2, "negative" -> 1, "weight" -> Array(0.027985969447200994, 0.0280087708449971, 0.02801892804134801, 0.02801892804134801, 0.0, 0.004309167764692354, 0.004309167764692355, 0.02801892804134801, 0.0, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.0, 0.004309167764692354, 0.004309167764692354, 0.023709760276655657, 0.02801892804134801, 0.004309167764692355, 0.02801892804134801, 0.004309167764692354, 0.0, 0.004309167764692354, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.023709760276655657, 0.004309167764692354, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.004309167764692355, 0.02801892804134801, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 9.486769009248166E-20, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.0, 0.0, 0.02801892804134801, 0.0, 0.02801892804134801, 0.0, 0.02801892804134801, 0.02801892804134801, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.004309167764692355, 0.004309167764692354, 0.02801892804134801).mkString(","), "threshold" -> 0.0),
      Map("positive" -> 3, "negative" -> 1, "weight" -> Array(0.022504003585286945, 0.02251769345446249, 0.02252302098968578, 0.02252302098968578, 0.009008897408266976, 0.02252302098968578, 0.013514123581418817, 2.039655336988355E-19, 0.0, 0.0, 0.009008897408266976, 0.0, 0.02252302098968578, 0.0, 0.02252302098968578, 0.0, 0.02252302098968578, 0.009008897408266978, 0.02252302098968578, 0.02252302098968578, 0.013514123581418817, 0.02252302098968578, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.009008897408266978, 0.02252302098968578, 2.039655336988355E-19, 0.02252302098968578, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.0, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.0, 0.013514123581418817, 0.02252302098968578, 0.02252302098968578, 0.009008897408266978, 0.009008897408266978, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.013514123581418817, 0.02252302098968578, 2.039655336988355E-19, 0.02252302098968578).mkString(","), "threshold" -> 0.0),
      Map("positive" -> 3, "negative" -> 2, "weight" -> Array(0.022504002772450946, 0.022517692630251097, 0.022523020168359664, 0.022523020168359664, 0.009008931032043841, 0.022523020168359664, 0.013514089136315816, -1.3830459841886628E-19, 0.0, 0.0, 0.009008931032043841, 0.0, 0.022523020168359664, 0.0, 0.022523020168359664, 0.0, 0.022523020168359664, 0.009008931032043841, 0.022523020168359664, 0.022523020168359664, 0.013514089136315818, 0.022523020168359664, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.009008931032043841, 0.022523020168359664, -1.3830459841886628E-19, 0.022523020168359664, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.0, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.0, 0.013514089136315816, 0.022523020168359664, 0.022523020168359664, 0.009008931032043841, 0.009008931032043841, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.013514089136315816, 0.022523020168359664, -1.3830459841886628E-19, 0.022523020168359664).mkString(","), "threshold" -> 0.0),
      Map("positive" -> 2, "negative" -> 2, "weight" -> Array(-0.0010647542346596975, -0.0010399054415720416, 0.03064589508714641, -0.0010496480096665126, -0.10070002032280291, 0.06372703545240212, 0.005888591451368436, 0.14863541912938427, -0.09486095629810866, -0.17822247521649656, 0.22998604648102633, 0.17831384575730366, 0.23490406419731516, 0.0, -0.21576254534284475, 0.0014811748292004503, -0.036058895297147696, -0.027861875480720714, -0.0010496480096665126, 0.01823177774416932, 0.004791431871671982, -0.03605361837120683, -0.14966555394160216, -0.036058895297147696, -0.0010463245016110974, 0.0699473416407275, -0.0010463245016110974, -0.07958616345141656, 0.014178940918406779, -0.036058895297147696, 0.0047912457927718755, -0.0010496480096665126, 0.004791431871671982, -0.22068419628623054, -0.052773935980362396, 0.03064589508714641, -3.447148196783039E-6, -0.0010496480096665126, -0.0010496480096665126, -0.001044371083725595, -0.0010496480096665126, -0.3155398756583981, 0.016715040683214652, 0.0, -0.0010496480096665126, -0.0010496480096665126, -0.0010496480096665126, -0.0010496480096665126, -0.037540070126348184, -0.10070548332764397, 0.0, 0.0047912457927718755, -0.21283861883705366, -0.0010496480096665126, -0.03754522341214776, -0.0010496480096665126, -0.0010496480096665126, -0.24453760908206332, -0.0010496480096665126, 0.020064394940619932, -0.0010496480096665126, -0.0010496480096665126, -0.20247877321579838, 0.018228330595972533, 0.07247453125249761, 0.06994929505861307).mkString(","), "threshold" -> 0.0)
    )


    assert(processor.modelling(ds_iris).collect().size == 6)

  }

  @Test
  def predictMultiple(): Unit = {
    //iris数据集合

    //wine数据集合
    val conf = SVMAnalyzer(0.002, 0.1, 100, 100, "label","classifyLabel", "features", multi = true)
    val processor = new ModelingSVMAnalyzer(conf, AnalyzerType.MODEL)
    //
    //   val lables= labelTuple(ds_iris, conf.label).collect()
    //
    //    lables.map(tuple=>{
    //      val lbs= ds_iris.getExecutionEnvironment.fromElements(tuple)
    //      filter(ds_iris,lbs)
    //
    //    }).reduce(_.union(_)).collect().foreach(println)
    //
    //    def filter(dataSet: DataSet[RichMap],lbs:DataSet[(String,String)]) ={
    //    ds_iris.filter(new RichFilterFunction[RichMap] {
    //
    //      lazy val tuple = getRuntimeContext.getBroadcastVariable[(String,String)]("labels").get(0)
    //
    //      override def filter(value: RichMap): Boolean = {
    //        println("tuple:"+tuple)
    //
    //        if (tuple._1 == tuple._2) {
    //          true
    //        } else {
    //
    //          val lb = value.getOrElse(conf.label, "").toString
    //          lb == tuple._1 || lb == tuple._2
    //        }
    //      }
    //
    //    }).withBroadcastSet(lbs, "labels")
    //    }


    val data: DataSet[RichMap] = env.fromElements(Map("positive" -> 3, "negative" -> 3, "weight" ->
      Array(-0.010647600772134025, -0.01030527517503048, 0.1273485955736078, -0.010709139833974623, -0.22533725311631345, 0.06321781261082252, 0.18573396019883462, 0.04331660290959661, -0.16695484392931187, -0.10786691650502328, 0.01785685966736744, -0.0789766429123542, 0.1421863072501526, 0.0, 0.06322169997391958, -0.18179608605066927, -0.010707469571726396, -0.015060588504413294, -0.010709139833974623, 0.13946275789206924, -0.3127738190797226, -0.0107073339486886, -0.07392479729606627, -0.010707469571726396, -0.01070881526429711, -0.010708618662817809, -0.01070881526429711, 0.1421923250682131, 0.013835567283278581, -0.010707469571726396, -0.2597473932593905, -0.010709139833974623, -0.47002505451783894, 0.15625158629036004, -0.010707461699464396, 0.1273485955736078, -0.15016956279733898, -0.010709139833974623, -0.010709139833974623, -0.01070900421093684, -0.010709139833974623, -0.010703122015914012, -7.872261996808863E-9, 0.0, -0.010709139833974623, -0.010709139833974623, -0.010709139833974623, -0.010709139833974623, 0.17108861647894286, 0.14219150795721341, 0.0, -0.10249615782127434, 0.2775248329832021, -0.010709139833974623, 0.16400648364545037, -0.16796037527209084, -0.010709139833974623, -0.010702465221719408, -0.010709139833974623, -0.010708458346012658, -0.010709139833974623, -0.010709139833974623, 0.005376119707614998, -0.010706804905269797, -0.121687466418403, -0.010708807609457539).mkString(","),
      "threshold" -> 0.0),
      Map("positive" -> 1, "negative" -> 1, "weight" -> Array(-0.02966784873193401, -0.030170571118489583, -0.2175541697710576, -0.029687066516372842, 0.372864398931401, -0.17336712327093365, -0.175138178584966, -0.23622274508606267, 0.2800782222784482, 0.30886531841771403, -0.26261456443938536, -0.1458963337340293, -0.4261724763420631, 0.0, 0.15304423792138372, 0.16228036221450207, 0.006459281718171993, 0.04162037515468148, -0.029687066516372842, -0.10942806041654463, 0.24621986566512527, 0.0064587945768754965, 0.22210563380320195, 0.006459281718171993, -0.029687764803200463, -0.0719724973467584, -0.029687764803200463, -0.0636159523433251, -0.05058426585702695, 0.006459281718171993, 0.290636361391728, -0.029687066516372842, 0.4866655373010591, 0.052791722345213545, 0.10552227762155408, -0.2175541697710576, 0.17266442006641677, -0.029687066516372842, -0.029687066516372842, -0.029687553657669345, -0.029687066516372842, 0.3328694574823652, -0.09906299590338208, 0.0, -0.029687066516372842, -0.029687066516372842, -0.029687066516372842, -0.029687066516372842, -0.15582108049633006, -0.0636099614725668, 0.0, 0.05019068975579451, -0.06994798381041843, -0.029687066516372842, -0.08803864349868916, 0.2107586051195607, -0.029687066516372842, 0.2905835395106832, -0.029687066516372842, -0.029692570245834653, -0.029687066516372842, -0.029687066516372842, 0.1461678133085009, 0.06323635964987213, 0.09663017554120247, -0.0719722862012272).mkString(","),
        "threshold" -> 0.0),
      Map("positive" -> 2, "negative" -> 1, "weight" -> Array(0.027985969447200994, 0.0280087708449971, 0.02801892804134801, 0.02801892804134801, 0.0, 0.004309167764692354, 0.004309167764692355, 0.02801892804134801, 0.0, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.0, 0.004309167764692354, 0.004309167764692354, 0.023709760276655657, 0.02801892804134801, 0.004309167764692355, 0.02801892804134801, 0.004309167764692354, 0.0, 0.004309167764692354, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.023709760276655657, 0.004309167764692354, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.004309167764692355, 0.02801892804134801, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 9.486769009248166E-20, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.0, 0.0, 0.02801892804134801, 0.0, 0.02801892804134801, 0.0, 0.02801892804134801, 0.02801892804134801, 0.0, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.02801892804134801, 0.0, 0.004309167764692355, 0.004309167764692354, 0.02801892804134801).mkString(","), "threshold" -> 0.0),
      Map("positive" -> 3, "negative" -> 1, "weight" -> Array(0.022504003585286945, 0.02251769345446249, 0.02252302098968578, 0.02252302098968578, 0.009008897408266976, 0.02252302098968578, 0.013514123581418817, 2.039655336988355E-19, 0.0, 0.0, 0.009008897408266976, 0.0, 0.02252302098968578, 0.0, 0.02252302098968578, 0.0, 0.02252302098968578, 0.009008897408266978, 0.02252302098968578, 0.02252302098968578, 0.013514123581418817, 0.02252302098968578, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.009008897408266978, 0.02252302098968578, 2.039655336988355E-19, 0.02252302098968578, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.0, 0.0, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.0, 0.013514123581418817, 0.02252302098968578, 0.02252302098968578, 0.009008897408266978, 0.009008897408266978, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.02252302098968578, 0.013514123581418817, 0.02252302098968578, 2.039655336988355E-19, 0.02252302098968578).mkString(","), "threshold" -> 0.0),
      Map("positive" -> 3, "negative" -> 2, "weight" -> Array(0.022504002772450946, 0.022517692630251097, 0.022523020168359664, 0.022523020168359664, 0.009008931032043841, 0.022523020168359664, 0.013514089136315816, -1.3830459841886628E-19, 0.0, 0.0, 0.009008931032043841, 0.0, 0.022523020168359664, 0.0, 0.022523020168359664, 0.0, 0.022523020168359664, 0.009008931032043841, 0.022523020168359664, 0.022523020168359664, 0.013514089136315818, 0.022523020168359664, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.009008931032043841, 0.022523020168359664, -1.3830459841886628E-19, 0.022523020168359664, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.0, 0.0, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.0, 0.013514089136315816, 0.022523020168359664, 0.022523020168359664, 0.009008931032043841, 0.009008931032043841, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.022523020168359664, 0.013514089136315816, 0.022523020168359664, -1.3830459841886628E-19, 0.022523020168359664).mkString(","), "threshold" -> 0.0),
      Map("positive" -> 2, "negative" -> 2, "weight" -> Array(-0.0010647542346596975, -0.0010399054415720416, 0.03064589508714641, -0.0010496480096665126, -0.10070002032280291, 0.06372703545240212, 0.005888591451368436, 0.14863541912938427, -0.09486095629810866, -0.17822247521649656, 0.22998604648102633, 0.17831384575730366, 0.23490406419731516, 0.0, -0.21576254534284475, 0.0014811748292004503, -0.036058895297147696, -0.027861875480720714, -0.0010496480096665126, 0.01823177774416932, 0.004791431871671982, -0.03605361837120683, -0.14966555394160216, -0.036058895297147696, -0.0010463245016110974, 0.0699473416407275, -0.0010463245016110974, -0.07958616345141656, 0.014178940918406779, -0.036058895297147696, 0.0047912457927718755, -0.0010496480096665126, 0.004791431871671982, -0.22068419628623054, -0.052773935980362396, 0.03064589508714641, -3.447148196783039E-6, -0.0010496480096665126, -0.0010496480096665126, -0.001044371083725595, -0.0010496480096665126, -0.3155398756583981, 0.016715040683214652, 0.0, -0.0010496480096665126, -0.0010496480096665126, -0.0010496480096665126, -0.0010496480096665126, -0.037540070126348184, -0.10070548332764397, 0.0, 0.0047912457927718755, -0.21283861883705366, -0.0010496480096665126, -0.03754522341214776, -0.0010496480096665126, -0.0010496480096665126, -0.24453760908206332, -0.0010496480096665126, 0.020064394940619932, -0.0010496480096665126, -0.0010496480096665126, -0.20247877321579838, 0.018228330595972533, 0.07247453125249761, 0.06994929505861307).mkString(","), "threshold" -> 0.0)
    )


    val rt = processor.actionWithModel(ds_iris.map(d => d - "label"), Some(data)).collect()

    assert(rt.count(_.get("label").contains("3")) == 3)
    assert(rt.count(_.get("label").contains("2")) == 5)

  }


}
