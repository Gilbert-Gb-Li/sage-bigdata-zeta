package io.netflow.lib

import java.net.{InetAddress, InetSocketAddress}
import java.util.{Date, UUID}

import io.netty.buffer.ByteBuf

trait Flow[T] {
  def id: UUID

  def version: String

  def length: Int

  def sender: InetSocketAddress

  def senderIP = sender.getAddress.getHostAddress

  def senderPort = sender.getPort

  def toMap: Map[String,Any]
}

/**
  * Unified interface for UDP Packets generated by NetFlow and sFlow.
  */
trait FlowPacket {
  def id: UUID

  def version: String

  def length: Int

  def sender: InetSocketAddress

  def senderIP = sender.getAddress.getHostAddress

  def senderPort = sender.getPort

  def timestamp: Date

  def count: Int

  def flows: List[Flow[_]]
}

/**
  * Unified interface for accounting statistics (InetAddress and Networks) generated by NetFlow.
  */
trait NetFlowData[T] extends Flow[T] {
  this: T with Flow[T] =>

  def srcPort: Int

  def dstPort: Int

  def srcAS: Option[Int]

  def dstAS: Option[Int]

  def srcAddress: InetAddress

  def dstAddress: InetAddress

  def nextHop: Option[InetAddress]

  def pkts: Long

  def bytes: Long

  def proto: Int

  def tos: Int

  def tcpflags: Int

  def start: Option[Date]

  def stop: Option[Date]

  def duration: Option[Long] = for {sto <- stop; sta <- start} yield sto.getTime - sta.getTime

  private lazy val nextHopIP = nextHop.map(_.getHostAddress)


  protected def stringExtra = ""

  override def toString = "%s reported by %s:%s containing %s:%s%s -> %s -> %s:%s%s Proto %s - ToS %s - %s pkts - %s bytes %s".format(
    version, senderIP, senderPort, srcAddress.getHostAddress, srcPort, srcAS.filter(_ == 0).map(" (" + _ + ")").getOrElse(""),
    nextHopIP.getOrElse("direct"), dstAddress.getHostAddress, dstPort, dstAS.filter(_ == 0).map(" (" + _ + ")").getOrElse(""),
    proto, tos, pkts, bytes, stringExtra)
}

/**
  * Wrapper class for NetFlow Bytes
  *
  * @param sender Sender Socket Address
  * @param msg    Netty ByteBuf
  */
case class NetFlow(sender: InetSocketAddress, msg: ByteBuf)

/**
  * Wrapper class for SFlow Bytes
  *
  * @param sender Sender Socket Address
  * @param msg    Netty ByteBuf
  */
case class SFlow(sender: InetSocketAddress, msg: ByteBuf)
